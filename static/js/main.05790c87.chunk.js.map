{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","App","classes","useState","input","setInput","useRef","results","setResults","nominations","setNominations","useEffect","fetch","then","response","json","data","current","Search","map","result","className","Grid","container","item","xs","Paper","FormControl","fullWidth","clsx","margin","textField","variant","InputLabel","htmlFor","FilledInput","id","type","value","onChange","event","target","FormHelperText","List","component","aria-labelledby","length","movie","ListItem","ListItemText","primary","ListItemSecondaryAction","Button","disabled","includes","onClick","push","addNomination","movieIndex","indexOf","splice","removeNomination","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qVAgBMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,QAASJ,EAAMK,QAAQ,GACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,eA2GfC,MArGf,WACE,IAAMC,EAAUd,IADH,EAEae,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGeF,mBAASG,iBAAO,KAH/B,mBAGRC,EAHQ,KAGCC,EAHD,OAIyBL,mBAAS,IAJlC,mBAINM,EAJM,KAIOC,EAJP,KA8Bb,OAxBAC,qBAAU,WACRC,MAAM,6BAA+BR,EAA/B,qBACLS,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAAG,GACJT,EAAQU,QAAUD,EAAKE,OAASF,EAAKE,OAAOC,KAAI,SAACC,GAC/C,OAAOA,EAAM,MAAY,KAAOA,EAAM,KAAW,OAC9C,GACLZ,EAAWD,EAAQU,eAkBrB,sBAAKI,UAAU,MAAf,UACE,8CACA,wFACA,eAACC,EAAA,EAAD,CAAMC,WAAS,EAAC5B,QAAS,EAAzB,UACE,cAAC2B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CAAOL,UAAWnB,EAAQT,MAA1B,SACE,eAACkC,EAAA,EAAD,CAAaC,WAAS,EAACP,UAAWQ,YAAK3B,EAAQ4B,OAAQ5B,EAAQ6B,WAAYC,QAAQ,SAAnF,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,eAApB,yBACA,cAACC,EAAA,EAAD,CACEC,GAAG,SACHC,KAAK,OACLC,MAAOlC,EACPmC,SAAU,SAAAC,GAAUnC,EAASmC,EAAMC,OAAOH,UAE5C,cAACI,EAAA,EAAD,CAAgBN,GAAG,2BAAnB,mDAIN,cAACd,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,eAACC,EAAA,EAAD,CAAOL,UAAWnB,EAAQT,MAA1B,UACGW,GAAS,+CAAkBA,EAAlB,QACV,cAACuC,EAAA,EAAD,CACEC,UAAU,MACVC,kBAAgB,sBAChBxB,UAAWnB,EAAQX,KAHrB,SAKGgB,EAAQuC,OAAS,GAAKvC,EAAQY,KAAI,SAAC4B,GAClC,OACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,QAASH,IAEX,cAACI,EAAA,EAAD,UACG,cAACC,EAAA,EAAD,CAAQpB,QAAQ,YAAYqB,SAAU5C,EAAY6C,SAASP,GAAQQ,QAAS,kBA/C3E,SAACR,GACrBtC,EAAY+C,KAAKT,GACjBrC,EAAeD,GA6CsFgD,CAAcV,IAAhG,gCALUA,aAazB,cAACzB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,eAACC,EAAA,EAAD,CAAOL,UAAWnB,EAAQT,MAA1B,UACE,mDACGgB,EAAYqC,OAAS,GAAK,0DAC7B,cAACH,EAAA,EAAD,CACEC,UAAU,MACVC,kBAAgB,mBAChBxB,UAAWnB,EAAQX,KAHrB,SAKGkB,EAAYqC,OAAS,GAAKrC,EAAYU,KAAI,SAAC4B,GAC1C,OACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,QAASH,IAEX,cAACI,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQpB,QAAQ,YAAYuB,QAAS,kBAlEhC,SAACR,GACxB,IAAMW,EAAajD,EAAYkD,QAAQZ,GACnCW,GAAc,GAChBjD,EAAYmD,OAAOF,EAAY,GAEjChD,EAAeD,GA6D8CoD,CAAiBd,IAA5D,mCALWA,oBCpGlBe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnD,MAAK,YAAkD,IAA/CoD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.05790c87.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport clsx from 'clsx';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst API_KEY = process.env.REACT_APP_OMDB_API_KEY;\n\nfunction App() {\n  const classes = useStyles();\n  const [input, setInput] = useState('');\n  var [results, setResults] = useState(useRef([]));\n  const [nominations, setNominations] = useState([]);\n\n  useEffect(() => {\n    fetch(\"http://www.omdbapi.com/?s=\" + input + \"&apikey=\" + API_KEY + \"&\")\n    .then((response) => response.json())\n    .then(data => {\n      results.current = data.Search ? data.Search.map((result) => {\n        return result[\"Title\"] + \" (\" + result[\"Year\"] + \")\";\n      }) : [];\n      setResults(results.current);\n    })\n  });\n\n  const addNomination = (movie) => {\n    nominations.push(movie);\n    setNominations(nominations);\n  };\n\n  const removeNomination = (movie) => {\n    const movieIndex = nominations.indexOf(movie);\n    if (movieIndex > -1) {\n      nominations.splice(movieIndex, 1);\n    }\n    setNominations(nominations);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>The Shoppies</h1>\n      <p>Please choose five of your favourite films to nominate.</p>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            <FormControl fullWidth className={clsx(classes.margin, classes.textField)} variant=\"filled\">\n              <InputLabel htmlFor=\"movie-search\">Movie Title</InputLabel>\n              <FilledInput\n                id=\"search\"\n                type='text'\n                value={input}\n                onChange={event => {setInput(event.target.value)}}\n              />\n              <FormHelperText id=\"movie-search-helper-text\">Enter a movie title to search.</FormHelperText>\n            </FormControl>\n          </Paper>\n        </Grid>\n        <Grid item xs={6}>\n          <Paper className={classes.paper}>\n            {input && <h3>Results for \"{input}\":</h3>}\n            <List\n              component=\"nav\"\n              aria-labelledby=\"search-results-list\"\n              className={classes.root}\n            >\n              {results.length > 0 && results.map((movie) => {\n                return (\n                  <ListItem key={movie}>\n                    <ListItemText\n                      primary={movie}\n                    />\n                    <ListItemSecondaryAction>\n                      {<Button variant=\"contained\" disabled={nominations.includes(movie)} onClick={() => addNomination(movie)}>Nominate Movie</Button>}\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                );\n              })}\n            </List>\n          </Paper>\n        </Grid>\n        <Grid item xs={6}>\n          <Paper className={classes.paper}>\n            <h3>Your Nominations:</h3>\n              {nominations.length > 4 && <p> You're done nominating! </p>}\n            <List\n              component=\"nav\"\n              aria-labelledby=\"nominations-list\"\n              className={classes.root}\n            >\n              {nominations.length > 0 && nominations.map((movie) => {\n                return (\n                  <ListItem key={movie}>\n                    <ListItemText\n                      primary={movie}\n                    />\n                    <ListItemSecondaryAction>\n                      <Button variant=\"contained\" onClick={() => removeNomination(movie)}>Remove Nomination</Button>\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                );\n              })}\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}